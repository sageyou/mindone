import numpy as np

NORMALIZATION_CASES = [
    [
        "AdaLayerNormZero",
        "diffusers.models.normalization.AdaLayerNormZero",
        "mindone.diffusers.models.normalization.AdaLayerNormZero",
        (16, 8),
        {},
        (
            np.random.randn(3, 4, 16).astype(np.float32),
            np.random.randint(0, 8, size=(3,)),
            np.random.randint(0, 8, size=(3,)),
        ),
        {},
    ],
    [
        "AdaGroupNorm",
        "diffusers.models.normalization.AdaGroupNorm",
        "mindone.diffusers.models.normalization.AdaGroupNorm",
        (16, 12, 2),
        {},
        (
            np.random.randn(3, 12, 4, 4).astype(np.float32),
            np.random.randn(3, 16).astype(np.float32),
        ),
        {},
    ],
    [
        "AdaLayerNormContinuous",
        "diffusers.models.normalization.AdaLayerNormContinuous",
        "mindone.diffusers.models.normalization.AdaLayerNormContinuous",
        (16, 12),
        {},
        (
            np.random.randn(3, 4, 16).astype(np.float32),
            np.random.randn(3, 12).astype(np.float32),
        ),
        {},
    ],
    [
        "LayerNorm",
        "torch.nn.LayerNorm",
        "mindone.diffusers.models.normalization.LayerNorm",
        (16, 1e-5, False),
        {},
        (np.random.randn(3, 4, 16).astype(np.float32),),
        {},
    ],
    [
        "GroupNorm",
        "torch.nn.GroupNorm",
        "mindone.diffusers.models.normalization.GroupNorm",
        (4, 16),
        {},
        (np.random.randn(3, 16, 4, 4).astype(np.float32),),
        {},
    ],
    [
        "GlobalResponseNorm",
        "diffusers.models.normalization.GlobalResponseNorm",
        "mindone.diffusers.models.normalization.GlobalResponseNorm",
        (16,),
        {},
        (np.random.randn(3, 4, 4, 16).astype(np.float32),),
        {},
    ],
]


EMBEDDINGS_CASES = [
    [
        "PatchEmbed",
        "diffusers.models.embeddings.PatchEmbed",
        "mindone.diffusers.models.embeddings.PatchEmbed",
        (),
        {},
        (np.random.randn(3, 3, 224, 224).astype(np.float32),),
        {},
    ],
    [
        "Timesteps",
        "diffusers.models.embeddings.Timesteps",
        "mindone.diffusers.models.embeddings.Timesteps",
        (128, False, 1),
        {},
        (np.random.randint(0, 100, size=(3,)).astype(np.int32),),
        {},
    ],
    [
        "TimestepEmbedding",
        "diffusers.models.embeddings.TimestepEmbedding",
        "mindone.diffusers.models.embeddings.TimestepEmbedding",
        (16, 128),
        {},
        (np.random.randn(3, 16).astype(np.float32),),
        {},
    ],
    [
        "GaussianFourierProjection",
        "diffusers.models.embeddings.GaussianFourierProjection",
        "mindone.diffusers.models.embeddings.GaussianFourierProjection",
        (),
        {},
        (np.random.randint(1, 100, size=(3,)).astype(np.float32),),
        {},
    ],
    [
        "SinusoidalPositionalEmbedding",
        "diffusers.models.embeddings.SinusoidalPositionalEmbedding",
        "mindone.diffusers.models.embeddings.SinusoidalPositionalEmbedding",
        (128, 32),
        {},
        (np.random.randn(3, 16, 128).astype(np.float32),),
        {},
    ],
    [
        "ImagePositionalEmbeddings",
        "diffusers.models.embeddings.ImagePositionalEmbeddings",
        "mindone.diffusers.models.embeddings.ImagePositionalEmbeddings",
        (192, 16, 12, 128),
        {},
        (np.random.randint(0, 192, size=(3, 16)).astype(np.int32),),
        {},
    ],
    [
        "LabelEmbedding",
        "diffusers.models.embeddings.LabelEmbedding",
        "mindone.diffusers.models.embeddings.LabelEmbedding",
        (100, 128, 0.1),
        {},
        (np.random.randint(0, 100, size=(3, 16)).astype(np.int32),),
        {},
    ],
    [
        "TextImageProjection",
        "diffusers.models.embeddings.TextImageProjection",
        "mindone.diffusers.models.embeddings.TextImageProjection",
        (),
        {},
        (
            np.random.randn(3, 77, 1024).astype(np.float32),
            np.random.randn(3, 768).astype(np.float32),
        ),
        {},
    ],
    [
        "ImageProjection",
        "diffusers.models.embeddings.ImageProjection",
        "mindone.diffusers.models.embeddings.ImageProjection",
        (),
        {},
        (np.random.randn(3, 768).astype(np.float32),),
        {},
    ],
    [
        "CombinedTimestepLabelEmbeddings",
        "diffusers.models.embeddings.CombinedTimestepLabelEmbeddings",
        "mindone.diffusers.models.embeddings.CombinedTimestepLabelEmbeddings",
        (100, 128),
        {},
        (np.random.randint(0, 100, size=(3,)).astype(np.int32), np.random.randint(0, 100, size=(3,)).astype(np.int32)),
        {},
    ],
    [
        "TextTimeEmbedding",
        "diffusers.models.embeddings.TextTimeEmbedding",
        "mindone.diffusers.models.embeddings.TextTimeEmbedding",
        (32, 128, 8),
        {},
        (np.random.randn(3, 4, 32).astype(np.float32),),
        {},
    ],
    [
        "TextImageTimeEmbedding",
        "diffusers.models.embeddings.TextImageTimeEmbedding",
        "mindone.diffusers.models.embeddings.TextImageTimeEmbedding",
        (32, 24, 64),
        {},
        (
            np.random.randn(3, 16, 32).astype(np.float32),
            np.random.randn(3, 16, 24).astype(np.float32),
        ),
        {},
    ],
    [
        "ImageTimeEmbedding",
        "diffusers.models.embeddings.ImageTimeEmbedding",
        "mindone.diffusers.models.embeddings.ImageTimeEmbedding",
        (32, 128),
        {},
        (np.random.randn(3, 16, 32).astype(np.float32),),
        {},
    ],
    [
        "ImageHintTimeEmbedding",
        "diffusers.models.embeddings.ImageHintTimeEmbedding",
        "mindone.diffusers.models.embeddings.ImageHintTimeEmbedding",
        (32, 128),
        {},
        (
            np.random.randn(3, 16, 32).astype(np.float32),
            np.random.randn(3, 3, 128, 128).astype(np.float32),
        ),
        {},
    ],
]


UPSAMPLE2D_CASES = [
    [
        "Upsample2D_default",
        "diffusers.models.upsampling.Upsample2D",
        "mindone.diffusers.models.upsampling.Upsample2D",
        (),
        dict(channels=32, use_conv=False),
        (np.random.randn(1, 32, 32, 32).astype(np.float32),),
        {},
    ],
    [
        "Upsample2D_with_conv",
        "diffusers.models.upsampling.Upsample2D",
        "mindone.diffusers.models.upsampling.Upsample2D",
        (),
        dict(channels=32, use_conv=True),
        (np.random.randn(1, 32, 32, 32).astype(np.float32),),
        {},
    ],
    [
        "Upsample2D_with_conv_out_dim",
        "diffusers.models.upsampling.Upsample2D",
        "mindone.diffusers.models.upsampling.Upsample2D",
        (),
        dict(channels=32, use_conv=True, out_channels=64),
        (np.random.randn(1, 32, 32, 32).astype(np.float32),),
        {},
    ],
    [
        "Upsample2D_with_transpose",
        "diffusers.models.upsampling.Upsample2D",
        "mindone.diffusers.models.upsampling.Upsample2D",
        (),
        dict(channels=32, use_conv=False, use_conv_transpose=True),
        (np.random.randn(1, 32, 32, 32).astype(np.float32),),
        {},
    ],
]


DOWNSAMPLE2D_CASES = [
    [
        "Downsample2D_default",
        "diffusers.models.downsampling.Downsample2D",
        "mindone.diffusers.models.downsampling.Downsample2D",
        (),
        dict(channels=32, use_conv=False),
        (np.random.randn(1, 32, 64, 64).astype(np.float32),),
        {},
    ],
    [
        "Downsample2D_with_conv",
        "diffusers.models.downsampling.Downsample2D",
        "mindone.diffusers.models.downsampling.Downsample2D",
        (),
        dict(channels=32, use_conv=True),
        (np.random.randn(1, 32, 64, 64).astype(np.float32),),
        {},
    ],
    [
        "Downsample2D_with_conv_pad1",
        "diffusers.models.downsampling.Downsample2D",
        "mindone.diffusers.models.downsampling.Downsample2D",
        (),
        dict(channels=32, use_conv=True, padding=1),
        (np.random.randn(1, 32, 64, 64).astype(np.float32),),
        {},
    ],
    [
        "Downsample2D_with_conv_out_dim",
        "diffusers.models.downsampling.Downsample2D",
        "mindone.diffusers.models.downsampling.Downsample2D",
        (),
        dict(channels=32, use_conv=True, out_channels=16),
        (np.random.randn(1, 32, 64, 64).astype(np.float32),),
        {},
    ],
]


RESNET_CASES = [
    [
        "ResnetBlock2D_default",
        "diffusers.models.resnet.ResnetBlock2D",
        "mindone.diffusers.models.resnet.ResnetBlock2D",
        (),
        {"in_channels": 32, "temb_channels": 128},
        (np.random.randn(1, 32, 64, 64).astype(np.float32), np.random.randn(1, 128).astype(np.float32)),
        {},
    ],
    [
        "ResnetBlock2D_with_use_in_shortcut",
        "diffusers.models.resnet.ResnetBlock2D",
        "mindone.diffusers.models.resnet.ResnetBlock2D",
        (),
        {"in_channels": 32, "temb_channels": 128, "use_in_shortcut": True},
        (np.random.randn(1, 32, 64, 64).astype(np.float32), np.random.randn(1, 128).astype(np.float32)),
        {},
    ],
    [
        "ResnetBlock2D_up",
        "diffusers.models.resnet.ResnetBlock2D",
        "mindone.diffusers.models.resnet.ResnetBlock2D",
        (),
        {"in_channels": 32, "temb_channels": 128, "up": True},
        (np.random.randn(1, 32, 64, 64).astype(np.float32), np.random.randn(1, 128).astype(np.float32)),
        {},
    ],
    [
        "ResnetBlock2D_down",
        "diffusers.models.resnet.ResnetBlock2D",
        "mindone.diffusers.models.resnet.ResnetBlock2D",
        (),
        {"in_channels": 32, "temb_channels": 128, "down": True},
        (np.random.randn(1, 32, 64, 64).astype(np.float32), np.random.randn(1, 128).astype(np.float32)),
        {},
    ],
    [
        "ResnetBlock2D_down_with_kernel_fir",
        "diffusers.models.resnet.ResnetBlock2D",
        "mindone.diffusers.models.resnet.ResnetBlock2D",
        (),
        {"in_channels": 32, "temb_channels": 128, "kernel": "fir", "down": True},
        (np.random.randn(1, 32, 64, 64).astype(np.float32), np.random.randn(1, 128).astype(np.float32)),
        {},
    ],
    [
        "ResnetBlock2D_down_with_kernel_sde_vp",
        "diffusers.models.resnet.ResnetBlock2D",
        "mindone.diffusers.models.resnet.ResnetBlock2D",
        (),
        {"in_channels": 32, "temb_channels": 128, "kernel": "sde_vp", "down": True},
        (np.random.randn(1, 32, 64, 64).astype(np.float32), np.random.randn(1, 128).astype(np.float32)),
        {},
    ],
    [
        "ResnetBlock2D_up_with_kernel_fir",
        "diffusers.models.resnet.ResnetBlock2D",
        "mindone.diffusers.models.resnet.ResnetBlock2D",
        (),
        {"in_channels": 32, "temb_channels": 128, "kernel": "fir", "up": True},
        (np.random.randn(1, 32, 64, 64).astype(np.float32), np.random.randn(1, 128).astype(np.float32)),
        {},
    ],
    [
        "ResnetBlock2D_up_with_kernel_sde_vp",
        "diffusers.models.resnet.ResnetBlock2D",
        "mindone.diffusers.models.resnet.ResnetBlock2D",
        (),
        {"in_channels": 32, "temb_channels": 128, "kernel": "sde_vp", "up": True},
        (np.random.randn(1, 32, 64, 64).astype(np.float32), np.random.randn(1, 128).astype(np.float32)),
        {},
    ],
]


TRANSFORMER2D_CASES = [
    [
        "SpatialTransformer2DModel_default",
        "diffusers.models.transformers.transformer_2d.Transformer2DModel",
        "mindone.diffusers.models.transformers.transformer_2d.Transformer2DModel",
        (),
        dict(
            in_channels=32,
            num_attention_heads=1,
            attention_head_dim=32,
            dropout=0.0,
            cross_attention_dim=None,
        ),
        (np.random.randn(1, 32, 64, 64).astype(np.float32),),
        dict(return_dict=False),
    ],
    [
        "SpatialTransformer2DModel_cross_attention_dim",
        "diffusers.models.transformers.transformer_2d.Transformer2DModel",
        "mindone.diffusers.models.transformers.transformer_2d.Transformer2DModel",
        (),
        dict(
            in_channels=64,
            num_attention_heads=2,
            attention_head_dim=32,
            dropout=0.0,
            cross_attention_dim=64,
        ),
        (np.random.randn(1, 64, 64, 64).astype(np.float32), np.random.randn(1, 4, 64).astype(np.float32)),
        dict(return_dict=False),
    ],
    [
        "SpatialTransformer2DModel_timestep_1",
        "diffusers.models.transformers.transformer_2d.Transformer2DModel",
        "mindone.diffusers.models.transformers.transformer_2d.Transformer2DModel",
        (),
        dict(
            in_channels=64,
            num_attention_heads=2,
            attention_head_dim=32,
            dropout=0.0,
            cross_attention_dim=64,
            num_embeds_ada_norm=5,
        ),
        (np.random.randn(1, 64, 64, 64).astype(np.float32),),
        dict(timestep=np.array([1], dtype=np.int64), return_dict=False),
    ],
    [
        "SpatialTransformer2DModel_timestep_2",
        "diffusers.models.transformers.transformer_2d.Transformer2DModel",
        "mindone.diffusers.models.transformers.transformer_2d.Transformer2DModel",
        (),
        dict(
            in_channels=64,
            num_attention_heads=2,
            attention_head_dim=32,
            dropout=0.0,
            cross_attention_dim=64,
            num_embeds_ada_norm=5,
        ),
        (np.random.randn(1, 64, 64, 64).astype(np.float32),),
        dict(timestep=np.array([2], dtype=np.int64), return_dict=False),
    ],
    [
        "SpatialTransformer2DModel_dropout",
        "diffusers.models.transformers.transformer_2d.Transformer2DModel",
        "mindone.diffusers.models.transformers.transformer_2d.Transformer2DModel",
        (),
        dict(
            in_channels=32,
            num_attention_heads=2,
            attention_head_dim=16,
            dropout=0.3,
            cross_attention_dim=None,
        ),
        (np.random.randn(1, 32, 64, 64).astype(np.float32),),
        dict(return_dict=False),
    ],
    [
        "SpatialTransformer2DModel_discrete",
        "diffusers.models.transformers.transformer_2d.Transformer2DModel",
        "mindone.diffusers.models.transformers.transformer_2d.Transformer2DModel",
        (),
        dict(
            num_attention_heads=1,
            attention_head_dim=32,
            num_vector_embeds=5,
            sample_size=16,
        ),
        (np.random.randint(0, 5, (1, 32)).astype(np.int64),),
        dict(return_dict=False),
    ],
]


ALL_CASES = (
    NORMALIZATION_CASES + EMBEDDINGS_CASES + UPSAMPLE2D_CASES + DOWNSAMPLE2D_CASES + RESNET_CASES + TRANSFORMER2D_CASES
)
